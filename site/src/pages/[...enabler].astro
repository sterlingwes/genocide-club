---
import type { Enabler } from "../schemas/enabler";
import { getCollection } from "astro:content";
import Layout from "../layouts/Layout.astro";
import KilledGraph from "../generated/killed.astro";
import PostTypeIcon from "../components/PostTypeIcon.astro";
import OpacityOverlay from "../components/OpacityOverlay.astro";
import { getTimeline } from "../lib/server/timeline";
import { getSvgDomain } from "../lib/server/svg";
import { getEnhancedPosts } from "../lib/server/posts";

export async function getStaticPaths() {
  const enablerEntries = await getCollection("enabler");
  return enablerEntries.map((enabler) => ({
    params: { enabler: enabler.id },
    props: { enabler: enabler.data },
  }));
}

interface Props {
  enabler: Enabler;
}

const { enabler } = Astro.props;

const posts = getEnhancedPosts(enabler.posts);
const svgDomain = getSvgDomain();
const {
  graphConfig,
  svgTexts,
  dayTexts,
  clipPathTimes,
  clipPathValues,
  expectedDuration,
  postDelayLookup,
} = getTimeline({ svgDomain, posts });
---

<Layout clip title={`genocide.club â€¢ ${enabler.name}`}>
  <main>
    <OpacityOverlay />
    <div class="graph">
      <div style={{ position: "relative" }}>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 400 235"
          style="width: 100vw; opacity: 0.9"
        >
          <KilledGraph />
          {
            graphConfig.steps.map(({ markerPoint, markerTooltip, postTime }) =>
              markerPoint ? (
                <circle
                  class="marker"
                  cx={markerPoint[0]}
                  cy={markerPoint[1]}
                  r={3}
                  opacity="0"
                >
                  <title>{markerTooltip}</title>
                  <animate
                    begin={`${postDelayLookup[postTime] / 1_000}s`}
                    attributeName="opacity"
                    from="0"
                    to="1"
                    fill="freeze"
                    dur="0.5s"
                  />
                </circle>
              ) : null
            )
          }

          <defs>
            <linearGradient id="maskgradient">
              <stop offset="0" stop-color="white"></stop>
              <stop offset="0.5" stop-color="#CCC"></stop>
              <stop offset="0.7" stop-color="#AAA"></stop>
              <stop offset="0.9" stop-color="#999"></stop>
              <stop offset="1" stop-color="black"></stop>
            </linearGradient>
            <mask id="curtainfade">
              <rect
                x="0"
                y="0"
                width="0"
                height="235"
                fill="url(#maskgradient)"
              >
                <animate
                  id="curtainfade-anim"
                  attributeName="width"
                  begin="0s"
                  from="0"
                  to="400"
                  fill="freeze"
                  dur={`${expectedDuration / 1_000}s`}
                  values={clipPathValues}
                  keyTimes={clipPathTimes}></animate>
              </rect>
            </mask>
            <clipPath id="curtain">
              <rect x="0" y="0" width="0" height="235">
                <animate
                  id="curtain-anim"
                  attributeName="width"
                  begin="0s"
                  from="0"
                  to="400"
                  fill="freeze"
                  dur={`${expectedDuration / 1_000}s`}
                  values={clipPathValues}
                  keyTimes={clipPathTimes}></animate>
              </rect>
            </clipPath>
          </defs>
          <g class="svg-labels">
            <g class="svg-counts">
              {
                svgTexts.map(
                  ({
                    count,
                    freeze,
                    noOpacity,
                    countAnimId,
                    countDuration,
                    lastCountAnimId,
                  }) => (
                    <text text-anchor="end">
                      <tspan>{count}</tspan>
                      <animate
                        id={countAnimId}
                        attributeName="opacity"
                        from="0"
                        to={freeze ? "0.9" : "0"}
                        fill={freeze ? "freeze" : undefined}
                        values={noOpacity ? "0.9;0.9;0.9" : "0;0.9;0.9"}
                        keyTimes="0;0.1;1"
                        dur={`${countDuration / 1_000}s`}
                        begin={
                          lastCountAnimId ? `${lastCountAnimId}.end` : "0s"
                        }
                      />
                    </text>
                  )
                )
              }
            </g>
            <g class="svg-days-container">
              <g class="svg-days-bookends">
                <text text-anchor="end"> killed in </text>
              </g>
              <g class="svg-days">
                {
                  dayTexts.map(
                    ({
                      dayNumber: [
                        firstDayNumber,
                        secondDayNumber,
                        thirdDayNumber,
                      ],
                      duration,
                      dayAnimId,
                      lastDayAnimId,
                      noOpacity,
                      freeze,
                    }) => (
                      <text>
                        <tspan text-anchor="middle" textLength="2.2em">
                          <tspan
                            style={{
                              opacity:
                                firstDayNumber === "0" ? "0.4" : undefined,
                            }}
                          >
                            {firstDayNumber}
                          </tspan>
                          <tspan
                            style={{
                              opacity:
                                firstDayNumber === "0" &&
                                secondDayNumber === "0"
                                  ? "0.4"
                                  : undefined,
                            }}
                          >
                            {secondDayNumber}
                          </tspan>
                          <tspan>{thirdDayNumber}</tspan>
                        </tspan>
                        <animate
                          id={dayAnimId}
                          attributeName="opacity"
                          from="0"
                          to={freeze ? "0.9" : "0"}
                          fill={freeze ? "freeze" : undefined}
                          values={noOpacity ? "0.9;0.9;0.9" : "0;0.9;0.9"}
                          keyTimes="0;0.1;1"
                          dur={`${duration / 1_000}s`}
                          begin={lastDayAnimId ? `${lastDayAnimId}.end` : "0s"}
                        />
                      </text>
                    )
                  )
                }
              </g>
              <g class="svg-days-bookends">
                <text text-anchor="end"> days </text>
              </g>
            </g>
          </g>
        </svg>
      </div>
    </div>
    <div class="scroll-top-fade"></div>
    <header>
      <div class="logo">
        {enabler.name}
      </div>
      <div class="bio">
        {enabler.bio}
      </div>
    </header>
    <div class="posts">
      {
        posts.map((post, i) => (
          <div class="post-wrapper">
            <div
              class="post"
              data-dateval={post.dateValue}
              style={`animation-delay: ${postDelayLookup[post.dateValue] / 1_000}s`}
            >
              <div class="post-card">
                <div class="post-load-bar">
                  <div
                    class="post-load-bar-fill"
                    style={`animation-delay: ${postDelayLookup[post.dateValue] / 1_000}s; animation-duration: ${post.readTime.time / 1_000}s`}
                  />
                </div>
                {post.text}
                <div class="post-meta">
                  <div>{post.formattedDate}</div>
                  <div class="post-meta-type">
                    <a href={post.href} target="_blank">
                      <PostTypeIcon icon={post.type} />
                    </a>
                  </div>
                  {enabler.image && (
                    <div class="post-avatar">
                      <img src={enabler.image} />
                    </div>
                  )}
                </div>
              </div>
              {post.commentary && (
                <div class="post-commentary">{post.commentary}</div>
              )}
            </div>
          </div>
        ))
      }
    </div>
    <div class="bottom-line"></div>
    <div class="scroll-bottom-fade"></div>
  </main>
</Layout>

<style define:vars={{ aspectRatio: svgDomain.aspectRatio }}>
  @import url("https://fonts.googleapis.com/css2?family=Martian+Mono:wght@400;600;700&display=swap");

  main {
    position: absolute;
    top: 0;
    left: 0;
    width: 100vw;
    aspect-ratio: var(--aspectRatio);
    background-size: cover;
    background-repeat: no-repeat;
    background-image: url("/gaza_wapo.jpeg");
    overflow: hidden;
  }

  header {
    z-index: 200;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    padding: 20px;
  }

  header .logo {
    font-size: 2rem;
    color: white;
    font-weight: bold;
  }

  header .bio {
    margin-top: 10px;
    color: white;
    font-size: 1rem;
    font-weight: 500;
  }

  .graph {
    z-index: 1;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }

  :global(path#chartpath) {
    fill: rgba(100, 40, 40, 0.8);
  }

  .posts {
    pointer-events: none;
    z-index: 100;
    padding: 200px 100px;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    padding-bottom: 700px;
    overflow-y: scroll;
  }

  .scroll-top-fade {
    z-index: 101;
    position: absolute;
    top: -300px;
    left: -50px;
    right: -50px;
    height: 300px;
    box-shadow: 0px 150px 100px rgba(10, 10, 10, 0.8);
  }

  .scroll-bottom-fade {
    z-index: 101;
    position: absolute;
    bottom: -100px;
    left: -50px;
    right: -50px;
    height: 100px;
    box-shadow: 0px -50px 100px rgba(10, 10, 10, 1);
  }

  .bottom-line {
    z-index: 101;
    position: absolute;
    height: 5px;
    width: 100%;
    background-color: rgb(47, 24, 24);
    bottom: 0px;
    left: 0;
  }

  .svg-labels {
    transform: translate(95%, 70%);
  }

  .svg-counts text {
    font-family: "Martian Mono", monospace;
    font-weight: 600;
    font-size: 2.4vw;
    opacity: 0;
    fill: white;
  }

  .svg-days-container {
    transform: translate(0, 1.7vw);
  }

  .svg-days {
    transform: translate(-4.3vw, 0);
  }

  .svg-days text {
    fill: white;
    opacity: 0;
    font-size: 1.1vw;
    font-weight: 600;
    font-family: "Martian Mono", monospace;
  }

  .svg-days-bookends:first-of-type {
    transform: translate(-5.8vw, 0);
  }

  .svg-days-bookends text {
    font-weight: 700;
    font-size: 1.2vw;
    opacity: 0.9;
    fill: white;
  }

  .marker {
    fill: rgba(168, 44, 44, 1);
  }

  .post {
    opacity: 0;
    position: relative;
    left: -500px;
    width: 400px;
    max-width: 50%;

    animation-duration: 1s;
    animation-name: fadein;
    animation-fill-mode: forwards;
  }

  .post-wrapper {
    pointer-events: auto;
    padding-bottom: 20px;
  }

  .post-card {
    box-shadow: 0px 10px 10px rgba(10, 10, 10, 0.5);
    position: relative;
    background-color: #eee;
    border-radius: 3px;

    padding: 10px;
  }

  .post-load-bar {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
  }

  .post-load-bar-fill {
    height: 4px;
    width: 0%;
    opacity: 1;
    animation-name: post-load-fill;
    animation-timing-function: ease-out;
    background-color: rgba(168, 44, 44, 1);
  }

  @keyframes post-load-fill {
    0% {
      width: 0%;
      opacity: 1;
    }
    80% {
      width: 100%;
      opacity: 1;
    }
    100% {
      width: 100%;
      opacity: 0;
    }
  }

  .post-commentary {
    border: 1px solid #eee;
    border-radius: 3px;
    padding: 10px;
    color: white;
    margin-top: 15px;
  }

  .post-avatar {
    position: absolute;
    left: -65px;
    bottom: -1px;
    width: 50px;
    height: 50px;
    overflow: hidden;
    border-radius: 25px;
    box-shadow: 0px 10px 10px rgba(10, 10, 10, 0.5);
  }

  .post-avatar > img {
    width: 100%;
    height: 100%;
  }

  .post-meta {
    margin-top: 10px;
    font-size: 0.8rem;
    display: grid;
    grid-template-columns: 1fr 1fr;
  }

  .post-meta > div {
    align-self: center;
  }

  .post-meta-type {
    text-align: right;
  }

  .post-meta-type > a {
    display: inline-block;
  }

  @keyframes fadein {
    from {
      opacity: 0;
      left: -500px;
    }

    to {
      opacity: 0.8;
      left: 0;
    }
  }

  @media (min-aspect-ratio: 800/900) and (max-aspect-ratio: 950/900) {
    .marker {
      r: 4;
    }

    .svg-counts text {
      font-size: 3vw;
    }

    .svg-days-container {
      transform: translate(0, 2.2vw);
    }

    .svg-days-bookends:first-of-type {
      transform: translate(-6.9vw, 0);
    }

    .svg-days {
      transform: translate(-5.1vw, 0);
    }

    .svg-days > text > tspan {
      text-length: 2.8vw;
    }

    .svg-days text {
      font-size: 1.3vw;
    }

    .svg-days-bookends text {
      font-size: 1.4vw;
    }
  }

  @media (max-aspect-ratio: 800/900) {
    main {
      aspect-ratio: auto;
      height: 100vh;
    }

    .posts {
      z-index: 2;
      padding-right: 50px;
    }

    .post {
      max-width: none;
      width: 100%;
    }

    .graph {
      z-index: 3;
      top: auto;
      bottom: 0;
    }

    :global(path#chartpath) {
      stroke-width: 3;
      fill: rgba(100, 40, 40, 1);
    }

    /* 
      chart overlays posts at bottom 
      so make it more opaque so that the counts contrast better 
    */
    #maskgradient stop {
      stop-color: white;
    }
    #maskgradient stop:last-of-type {
      stop-color: black;
    }

    .marker {
      r: 8;
    }

    .svg-labels {
      transform: translate(95%, 60%);
    }

    .svg-counts text {
      font-size: 4vh;
    }

    .svg-days-container {
      transform: translate(0, 3.5vh);
    }

    .svg-days {
      transform: translate(-8.2vh, 0);
    }

    .svg-days text {
      font-size: 2.1vh;
    }

    .svg-days-bookends:first-of-type {
      transform: translate(-11.3vh, 0);
    }

    .svg-days-bookends text {
      font-size: 2.3vh;
    }
  }
</style>

<script>
  import { handlePostEvents } from "../lib/browser/posts";

  handlePostEvents();
</script>
