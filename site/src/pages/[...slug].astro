---
import type { Enabler } from "../schemas/enabler";
import { getCollection } from "astro:content";
import Layout from "../layouts/Layout.astro";
import KilledGraph from "../generated/killed.astro";
import PostTypeIcon from "../components/PostTypeIcon.astro";
import OpacityOverlay from "../components/OpacityOverlay.astro";
import { getTimelineConfig } from "../lib/timeline";
import { orderEarliestToLatest } from "../lib/posts";
import data from "../generated/data.json";
import { format, parseISO } from "date-fns";

export async function getStaticPaths() {
  const enablerEntries = await getCollection("enabler");
  return enablerEntries.map((enabler) => ({
    params: { slug: enabler.id },
    props: { enabler: enabler.data },
  }));
}

interface Props {
  enabler: Enabler;
}

const { enabler } = Astro.props;
const { dates, svgViewbox } = data;
const posts = orderEarliestToLatest(enabler.posts)
  .filter((post) => !post.skip)
  .map((post) => ({
    ...post,
    dateValue: parseISO(post.date).valueOf(),
    formattedDate: format(parseISO(post.date), "MMMM do yyyy"),
  }));
const {
  dayDuration,
  postDelays,
  labelUpdateIntervalMs,
  killedLabels,
  wcKilledLabels,
  firstDateVal,
  lastDateVal,
} = getTimelineConfig({
  durationSeconds: enabler.playDurationSeconds,
  dates,
  posts,
  killedPerDay: data.killed,
  wcKilledPerDay: data.wcKilled,
});

const postDates = posts.map((post) => post.dateValue);
const markerConfig = { postDates, minTime: firstDateVal, maxTime: lastDateVal };

const postAnimStyle = (index: number) => {
  return `animation-delay: ${postDelays[index]}s`;
};

const aspectRatio = svgViewbox.width / svgViewbox.height;
---

<Layout clip title={`genocide.club â€¢ ${enabler.name}`}>
  <main>
    <OpacityOverlay />
    <div class="graph">
      <KilledGraph
        playDuration={enabler.playDurationSeconds
          ? `${enabler.playDurationSeconds}s`
          : undefined}
      />
    </div>
    <div
      id="markers"
      data-viewbox={JSON.stringify(svgViewbox)}
      data-markerconfig={JSON.stringify(markerConfig)}
    >
    </div>
    <div class="scroll-top-fade"></div>
    <header>
      <div class="logo">
        {enabler.name}
      </div>
      <div class="bio">
        {enabler.bio}
      </div>
    </header>
    <div class="posts">
      {
        posts.map((post, i) => (
          <div
            class="post"
            data-dateval={post.dateValue}
            style={postAnimStyle(i)}
          >
            <div class="post-card">
              {post.text}
              <div class="post-meta">
                <div>{post.formattedDate}</div>
                <div class="post-meta-type">
                  <a href={post.href} target="_blank">
                    <PostTypeIcon icon={post.type} />
                  </a>
                </div>
                {enabler.image && (
                  <div class="post-avatar">
                    <img src={enabler.image} />
                  </div>
                )}
              </div>
            </div>
            {post.commentary && (
              <div class="post-commentary">{post.commentary}</div>
            )}
          </div>
        ))
      }
    </div>
    <div class="graph-labels">
      <div
        id="label-killed"
        data-labels={JSON.stringify(killedLabels)}
        data-interval={labelUpdateIntervalMs}
      >
        <div class="flex-spacer"></div>
        <div>
          <span></span>
          <span></span>
        </div>
      </div>
      <div id="label-killed-context">
        <div>
          killed in <span
            id="label-killed-context-value"
            data-days={dates.length}
            data-daydur={dayDuration}>1</span
          >
          <span id="label-killed-context-unit">day</span>
        </div>
        <div
          id="label-killed-context-2"
          data-labels={JSON.stringify(wcKilledLabels)}
        >
          <span>(</span>
          <span></span>
          <span> women & children)</span>
        </div>
      </div>
    </div>
    <div class="bottom-line"></div>
    <div class="scroll-bottom-fade"></div>
  </main>
</Layout>

<style define:vars={{ aspectRatio }}>
  @import url("https://fonts.googleapis.com/css2?family=Martian+Mono:wght@400;600;700&display=swap");

  main {
    position: absolute;
    top: 0;
    left: 0;
    width: 100vw;
    aspect-ratio: var(--aspectRatio);
    background-size: cover;
    background-repeat: no-repeat;
    background-image: url("/gaza_wapo.jpeg");
    overflow: hidden;
  }

  header {
    z-index: 200;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    padding: 20px;
  }

  header .logo {
    font-size: 2rem;
    color: white;
    font-weight: bold;
  }

  header .bio {
    margin-top: 10px;
    color: white;
    font-size: 1rem;
    font-weight: 500;
  }

  .graph {
    z-index: 1;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
  }

  :global(path#chartpath) {
    fill: rgba(100, 40, 40, 0.8);
  }

  .graph-labels {
    pointer-events: none;
    position: absolute;
    right: 40px;
    margin: auto;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    text-align: right;
    z-index: 5;
  }

  .graph-labels > div {
    flex-grow: 1;
  }

  .graph-labels > div:first-of-type {
    display: flex;
    flex-direction: column;
    flex-grow: 2;
  }

  .flex-spacer {
    flex-grow: 1;
  }

  #label-killed {
    font-family: "Martian Mono", monospace;
    font-weight: 700;
    font-size: 8vw;
    opacity: 0.7;
    color: white;
  }

  #label-killed span {
    display: inline-block;
  }

  #label-killed span:first-of-type {
    margin-right: -6vw;
  }

  #label-killed span:first-of-type::after {
    position: relative;
    content: ",";
    z-index: 999;
    font-size: 5vw;
  }

  #label-killed-context {
    font-size: 4vw;
    opacity: 0.7;
    color: white;
    font-weight: bold;
    text-transform: lowercase;
  }

  #label-killed-context-2 {
    margin-top: 10px;
    font-size: 2.5vw;
    font-weight: 500;
  }

  #label-killed-context-2 > span:nth-of-type(2) {
    margin-top: 10px;
    font-size: 2vw;
    font-weight: 400;
    font-family: "Martian Mono", monospace;
    margin-right: 5px;
  }

  #label-killed-context-value {
    font-family: "Martian Mono", monospace;
    font-weight: 600;
    font-size: 3.5vw;
  }

  .posts {
    z-index: 100;
    padding: 200px 100px;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    padding-bottom: 700px;
    overflow: scroll;
  }

  .scroll-top-fade {
    z-index: 101;
    position: absolute;
    top: -300px;
    left: -50px;
    right: -50px;
    height: 300px;
    box-shadow: 0px 150px 100px rgba(10, 10, 10, 0.8);
  }

  .scroll-bottom-fade {
    z-index: 101;
    position: absolute;
    bottom: -100px;
    left: -50px;
    right: -50px;
    height: 100px;
    box-shadow: 0px -50px 100px rgba(10, 10, 10, 1);
  }

  .bottom-line {
    z-index: 101;
    position: absolute;
    height: 5px;
    width: 100%;
    background-color: rgb(47, 24, 24);
    bottom: 0px;
    left: 0;
  }

  .post {
    opacity: 0;
    position: relative;
    left: -500px;
    width: 400px;
    max-width: 50%;

    animation-duration: 1s;
    animation-name: fadein;
    animation-fill-mode: forwards;
  }

  .post-card {
    box-shadow: 0px 10px 10px rgba(10, 10, 10, 0.5);
    position: relative;
    background-color: #eee;
    border-radius: 3px;
    margin-bottom: 20px;
    padding: 10px;
  }

  .post-commentary {
    border: 1px solid #eee;
    border-radius: 3px;
    padding: 10px;
    color: white;
  }

  .post-avatar {
    position: absolute;
    left: -65px;
    bottom: -1px;
    width: 50px;
    height: 50px;
    overflow: hidden;
    border-radius: 25px;
    box-shadow: 0px 10px 10px rgba(10, 10, 10, 0.5);
  }

  .post-avatar > img {
    width: 100%;
    height: 100%;
  }

  .post-meta {
    margin-top: 10px;
    font-size: 0.8rem;
    display: grid;
    grid-template-columns: 1fr 1fr;
  }

  .post-meta > div {
    align-self: center;
  }

  .post-meta-type {
    text-align: right;
  }

  .post-meta-type > a {
    display: inline-block;
  }

  @keyframes fadein {
    from {
      opacity: 0;
      left: -500px;
    }

    to {
      opacity: 0.8;
      left: 0;
    }
  }

  @media (max-aspect-ratio: 800/900) {
    main {
      aspect-ratio: none;
      height: 100vh;
    }

    .posts {
      z-index: 2;
      padding-right: 50px;
    }

    .post {
      max-width: none;
      width: 100%;
    }

    .graph {
      z-index: 3;
      top: auto;
      bottom: 0;
    }

    :global(path#chartpath) {
      stroke-width: 3;
      fill: rgba(100, 40, 40, 1);
    }

    .graph-labels {
      top: 50%;
      height: 50%;
    }

    .graph-labels > div:first-of-type {
      flex-grow: 3;
    }

    #label-killed {
      font-size: 9vw;
    }

    #label-killed-context {
      font-size: 5vw;
    }

    #label-killed-context-2 {
      font-size: 3vw;
    }

    #label-killed-context-2 > span:nth-of-type(2) {
      font-size: 2.5vw;
    }

    #label-killed-context-value {
      font-size: 4vw;
    }

    .posts {
      bottom: 50%;
    }
  }
</style>

<script>
  import { setLineMarkersForPosts } from "../lib/browser/markers";
  import { startCounterLabels } from "../lib/browser/graph-labels";
  import { handlePostEvents } from "../lib/browser/posts";

  const markerHolder: HTMLElement | null = document.querySelector("#markers");
  if (!markerHolder) {
    throw new Error("No marker holder element found");
  }
  const svgViewbox = JSON.parse(markerHolder.dataset.viewbox ?? "");
  const markerConfig: {
    postDates: number[];
    minTime: number;
    maxTime: number;
  } = JSON.parse(markerHolder.dataset.markerconfig ?? "");
  let markers = setLineMarkersForPosts({
    ...markerConfig,
    markerHolder,
    svgViewbox,
  });
  const shownMarkers = new Set<number>();

  window.onresize = () => {
    markers = setLineMarkersForPosts({
      ...markerConfig,
      markerHolder,
      svgViewbox,
    });
    Array.from(shownMarkers).forEach((markerTime) =>
      markers.showOne(markerTime)
    );
  };

  /**
   * ideas for refactoring out javascript logic:
   *
   * - render all "steps" in labels to the DOM and tie-in with CSS animation "keyframing"
   * - keep keyframing for posts but update delay logic to make the posts appear less quickly
   * - setup companion keyframe animation for markers (with delays, like posts)
   * - setup companion keyframe animation for graph (add a clippath for each speed segment ?)
   */

  handlePostEvents({ markers, shownMarkers });
  startCounterLabels();
</script>
